{
  "name": "node-hue-api",
  "version": "0.1.1",
  "author": {
    "name": "Peter Murray",
    "email": "peter.murray@osirisoft.com"
  },
  "contributors": [
    {
      "name": "Peter Murray",
      "email": "peter.murray@osirisoft.com"
    }
  ],
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "xml2js": "0.2.2",
    "q": "0.8.12",
    "q-io": "1.5.1",
    "parseUri": "1.2.3-2",
    "MD5": "1.0.3"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "1.4.2"
  },
  "engines": {
    "nodejs": ">= 0.8.0"
  },
  "keywords": [
    "philips",
    "hue",
    "api",
    "living",
    "color"
  ],
  "readme": "# Node Hue API\n\nAn API for NodeJS that interacts with the Philips Hue Bridge to control Philips Hue Light Bulbs and\nPhilips Living Color Lamps.\n\nThis API abstracts away the actual Philips Hue Bridge REST API, that is as yet, not finalized.\n\nThere are a number of resources where users have detailed documentation on the Philips Hue Bridge;\n - Unofficial Hue Documentation: <http://burgestrand.github.com/hue-api/>\n - Hack the Hue: <http://rsmck.co.uk/hue>\n - Hue Hackers Mailing List: <https://groups.google.com/forum/#!forum/hue-hackers>\n\n## Installation\n\nNodeJS application using npm:\n```\n$ npm install node-hue-api\n```\n\n## Examples\n\n### Locating a Philips Hue Bridge\nTo locate all the Philips Hue Bridges on your network (if you do not know the IP Address already);\n\n```js\nvar hue = require(\"node-hue-api\").hue;\n\nvar displayBridges = function(bridge) {\n\tconsole.log(\"Hue Bridges Found: \" + JSON.stringify(bridge));\n};\n\nhue.locateBridges().then(displayBridges).done();\n```\n\n### Registering a new Device/User with the Bridge\nOnce you have discovered the IP Address for your bridge (either from the locate function, or looking it up on the Philips Hue website), then you will need to register your application with the Hue Bridge.\n\nRegistration requires you to issue a request to the Bridge after pressing the Link Button on the Bridge.\n\nThs library offer two functions to register new devices/users with the Hue Bridge. These are detailed below.\n\n###Registering without an existing Device/User ID\nThis method is useful for creating a new user when you have only just discovered your Hue Bridge and do not know the existing device/user IDs.\n\n```js\nvar hue = require(\"node-hue-api\").hue;\n\nvar hostname = \"192.168.2.129\",\n\tnewUserName = \"a username\",\n\tuserDescription = \"device description goes here\";\n\nhue.registerUser(hostname, newUserName, userDescription)\n\t.then(displayResultFunction)\n\t.fail(displayErrorFunction)\n\t.done();\n```\n\n### Registering a New Device/User ID within the API\nIf you want to perform a lookup to ensure that a device/user does not already exist before registering a new device/user, then you can use the registerUser() function when connected to the Hue Bridge as an already approved user.\n\n```js\nvar hue = require(\"node-hue-api\").hue;\n\nvar hostname = \"192.168.2.129\",\n\tusername = \"033a6feb77750dc770ec4a4487a9e8db\",\n\tnewUserName = \"a new username\",\n\tuserDescription = \"device description goes here\",\n\tapi;\n\napi = new hue.HueApi(hostname, username);\napi.registerUser(newUserName, userDescription)\n\t.then(displayResultFunction)\n\t.fail(displayErrorFunction)\n\t.done();\n```\n\n### Registration Output/Error\nWhen using either of the above registration methods you will get either a hash of the username provided which will be the API username to use, or an error that will likely be due to not pressing the link button on the Bridge.\n\nIf the link button was NOT pressed on the bridge, then you will get an APIError thrown, which will be captured by the displayError function in the above examples.\n```\nApi Error: link button not pressed\n```\n\nIf the link button was pressed you should get a response that will provide you with a hash to use as the username for connecting with the Hue Bridge, e.g.\n```\n033a6feb77750dc770ec4a4487a9e8db\n```\nThe value returned will be an MD5 hash of the username value passed into the registration function.\n\n\n### Validating a Connection to a Philips Hue Bridge\nTo connect to a Philips Hue Bridge and obtain some basic details about it you can use the connect() function. This function can be used to validate that the host and username is correct before attempting to issue other commands to the Bridge.\n\n```js\nvar hue = require(\"node-hue-api\").hue;\n\nvar displayResult = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar hostname = \"192.168.2.129\",\n    username = \"083b2f780c78555d532b78544f135798\",\n    api;\n\napi = new hue.HueApi(hostname, username);\napi.connect().then(displayResult).done();\n```\n\nRunning the above code should give you a result similar to;\n```\n{\n  \"name\": \"Philips hue\",\n  \"version\": \"01003542\",\n  \"linkButton\": false,\n  \"macAddress\": \"00:xx:xx:xx:xx:xx\",\n  \"host\": \"192.168.2.129\"\n}\n```\n\n\n### Obtaining Registered Users/Devices\nTo obtain the details for all the registered users/devices for a Hue Bridge you can use the registeredUsers() function.\n```js\nvar hue = require(\"node-hue-api\").hue;\n\nvar displayResult = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar hostname = \"192.168.2.129\";\nvar username = \"083b2f780c78555d532b78544f135798\";\n\nvar api = new hue.HueApi(hostname, username);\napi.registeredUsers().then(displayResult).done();\n```\nThis will produce a JSON response that has a root key of \"devices\" that has an array of registered devices/users for the Bridge. An example of the result is shown below\n```\n{\n  \"devices\": [\n    {\n      \"name\": \"Node API\",\n      \"username\": \"083b2f780c78555d532b78544f135798\",\n      \"created\": \"2013-01-02T19:17:02\",\n      \"accessed\": \"2012-12-24T20:18:55\"\n    },\n    {\n      \"name\": \"iPad\",\n      \"username\": \"279c26146e3318997d69a8a66330b5f5\",\n      \"created\": \"2012-12-24T14:05:25\",\n      \"accessed\": \"2013-01-04T21:37:29\"\n    },\n    {\n      \"name\": \"iPhone\",\n      \"username\": \"fcb0a47cd664f0cbaa34d36def54577d\",\n      \"created\": \"2012-12-24T17:13:54\",\n      \"accessed\": \"2013-01-03T20:50:40\"\n    }\n  ]\n}\n````\n\n## License\nCopyright 2013. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this library except in compliance with the License.\n\nYou may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
  "readmeFilename": "README.md",
  "_id": "node-hue-api@0.1.1",
  "description": "An API for NodeJS that interacts with the Philips Hue Bridge to control Philips Hue Light Bulbs and Philips Living Color Lamps.",
  "dist": {
    "shasum": "75557dba26648b5ae7483ab837fafdad91e6dbdc"
  },
  "_from": "node-hue-api@",
  "_resolved": "https://registry.npmjs.org/node-hue-api/-/node-hue-api-0.1.1.tgz"
}
